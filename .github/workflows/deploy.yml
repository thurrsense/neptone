name: Build & Deploy

on:
  pull_request:
    branches: [ "dev" ]        # PR в dev — соберём образ (проверка)
  push:
    branches: [ "main" ]       # пуш в main — сборка + деплой

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write          # нужно для push в GHCR
    steps:
      - uses: actions/checkout@v4

      - name: Compute image tag
        id: meta
        run: |
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE=ghcr.io/${REPO_LC}:latest" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (and push on main)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.IMAGE }}

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            mkdir -p ~/neptone/docker

            # пишем продовый compose
            cat > ~/neptone/docker/docker-compose.prod.yml <<'YAML'
            version: "3.9"
            services:
              db:
                image: postgres:16
                restart: always
                environment:
                  POSTGRES_DB: ${DB_NAME}
                  POSTGRES_USER: ${DB_USER}
                  POSTGRES_PASSWORD: ${DB_PASSWORD}
                volumes:
                  - db_data:/var/lib/postgresql/data
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
                  interval: 10s
                  timeout: 5s
                  retries: 5

              web:
                image: ghcr.io/${{ github.repository }}:latest
                restart: always
                environment:
                  DJANGO_DEBUG: "0"
                  DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
                  DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
                  CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}
                  DB_HOST: db
                  DB_PORT: "5432"
                  DB_NAME: ${DB_NAME}
                  DB_USER: ${DB_USER}
                  DB_PASSWORD: ${DB_PASSWORD}
                depends_on:
                  db:
                    condition: service_healthy
                ports:
                  - "8000:8000"
                healthcheck:
                  test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health/ || exit 1"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s

            volumes:
              db_data:
            YAML

            # .env для продакшена из секрета
            cat > ~/neptone/docker/.env <<'ENVV'
            ${{ secrets.ENV_PROD }}
            ENVV

            cd ~/neptone/docker
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker compose --env-file .env -f docker-compose.prod.yml pull
            docker compose --env-file .env -f docker-compose.prod.yml up -d
            docker system prune -f
