name: Build & Deploy

on:
  pull_request:
    branches: ["dev"]        # PR в dev — проверочная сборка (без пуша)
  push:
    branches: ["main"]       # пуш в main — сборка + деплой

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      IMAGE: ${{ steps.meta.outputs.IMAGE }}   # <<< ВАЖНО: пробрасываем IMAGE наружу
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        if: always()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true
          version: latest

      - name: Compute image tag (lowercase)
        id: meta
        run: |
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE=ghcr.io/${REPO_LC}:latest" >> "$GITHUB_OUTPUT"

      - name: Build (push only on main)
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: docker/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Upload compose & nginx.conf via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: |
            docker/docker-compose.prod.yml
            docker/nginx/nginx.conf
          target: /root/neptone/docker/
          strip_components: 1

      - name: Deploy over SSH (pull & up)
        uses: appleboy/ssh-action@v1.2.0
        env:
          IMAGE: ${{ needs.build.outputs.IMAGE }}   # <<< теперь не пусто
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            cd /root/neptone/docker

            echo "== IMAGE from CI =="; echo "${IMAGE}"

            # .env для compose
            cat > .env <<'ENVV'
            ${{ secrets.ENV_PROD }}
            IMAGE=${{ env.IMAGE }}
            ENVV

            # Проверим, что IMAGE подставился
            if ! grep -qE '^IMAGE=.+$' .env; then
              echo "ERROR: IMAGE is empty in .env"; cat .env; exit 1
            fi

            # Немного диагностики
            ls -la
            sha256sum docker-compose.prod.yml || true

            # Нормализация и валидация
            sed -i '1s/^\xEF\xBB\xBF//' docker-compose.prod.yml || true
            sed -i 's/\r$//' docker-compose.prod.yml || true
            sed -i 's/\t/  /g' docker-compose.prod.yml || true

            # Логин в GHCR (ваш образ)
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            # (опционально) логин в Docker Hub — для postgres/nginx
            if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
              echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            fi

            # Посмотреть, какой итоговый config видит compose (должен быть image: ghcr.io/... )
            docker compose --env-file .env -f docker-compose.prod.yml config | sed -n '/services:/,$p'

            # Обновление и запуск
            docker compose --env-file .env -f docker-compose.prod.yml pull
            docker compose --env-file .env -f docker-compose.prod.yml up -d

            docker system prune -f
