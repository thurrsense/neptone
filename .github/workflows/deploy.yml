- name: Deploy over SSH (pull & up)
  uses: appleboy/ssh-action@v1.2.0
  env:
    IMAGE: ${{ steps.meta.outputs.IMAGE }}
  with:
    host: ${{ secrets.SSH_HOST }}
    username: ${{ secrets.SSH_USER }}
    key: ${{ secrets.SSH_KEY }}
    script_stop: true
    script: |
      set -e
      cd ~/neptone/docker

      # 1) .env из секрета
      cat > .env <<'ENVV'
      ${{ secrets.ENV_PROD }}
      ENVV

      # 2) Зачистка compose: убрать BOM/CRLF/табы
      sed -i '1s/^\xEF\xBB\xBF//' docker-compose.prod.yml || true   # BOM
      sed -i 's/\r$//' docker-compose.prod.yml || true              # CRLF
      sed -i 's/\t/  /g' docker-compose.prod.yml || true            # табы -> пробелы

      # 3) Подменим image у web на актуальный тег
      #   (меняем строку image: внутри сервиса web, не трогаем db)
      awk -v IMG="$IMAGE" '
        BEGIN{inweb=0}
        /^services:/ {print; next}
        /^[[:space:]]*web:/ {inweb=1; print; next}
        /^[[:space:]]*[a-z0-9_-]+:/ && !/^ *image:/ && inweb==1 {inweb=0}
        {
          if(inweb==1 && $0 ~ /^[[:space:]]*image:/){
            sub(/image:.*/,"image: " IMG)
          }
          print
        }
      ' docker-compose.prod.yml > docker-compose.prod.yml.tmp && mv docker-compose.prod.yml.tmp docker-compose.prod.yml

      # 4) Проверим YAML перед запуском
      echo "---- docker compose config (validation) ----"
      docker compose --env-file .env -f docker-compose.prod.yml config

      # 5) Логин, pull, up
      docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
      docker compose --env-file .env -f docker-compose.prod.yml pull
      docker compose --env-file .env -f docker-compose.prod.yml up -d
      docker system prune -f
