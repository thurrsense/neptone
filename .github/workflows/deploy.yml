name: Build & Deploy

on:
  pull_request:
    branches: ["dev"]
  push:
    branches: ["main"]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      IMAGE: ${{ steps.meta.outputs.IMAGE }}
    steps:
      - uses: actions/checkout@v4

      # Docker Hub login (чтобы не упираться в rate limit) — только на push
      - name: Login to Docker Hub
        if: ${{ github.event_name == 'push' }}
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true
          version: latest

      - name: Compute image tag (lowercase)
        id: meta
        run: |
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE=ghcr.io/${REPO_LC}:latest" >> "$GITHUB_OUTPUT"

      - name: Build (push only on main)
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: docker/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Подготовить каталог на сервере и удалить кривые хвосты
      - name: Prepare remote dir (cleanup)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            mkdir -p /root/neptone/docker
            # на всякий случай, если когда-то создавалась ПАПКА с таким именем
            [ -d /root/neptone/docker/docker-compose.prod.yml ] && rm -rf /root/neptone/docker/docker-compose.prod.yml || true
            [ -f /root/neptone/docker/docker-compose.prod.yml ] && rm -f  /root/neptone/docker/docker-compose.prod.yml || true
            [ -d /root/neptone/docker/nginx.conf ] && rm -rf /root/neptone/docker/nginx.conf || true

      # Копируем файлы ровно в /root/neptone/docker/
      - name: Upload compose via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker/docker-compose.prod.yml"
          target: "/root/neptone/docker/"
          overwrite: true

      - name: Upload nginx.conf via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker/nginx.conf"
          target: "/root/neptone/docker/"
          overwrite: true

      # Деплой
      - name: Deploy over SSH (pull, migrate, collectstatic, up)
        uses: appleboy/ssh-action@v1.2.0
        env:
          IMAGE: ${{ needs.build.outputs.IMAGE }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: IMAGE
          script_stop: true
          script: |
            set -euo pipefail
            cd /root/neptone/docker

            # .env из секрета + IMAGE
            cat > .env <<ENVV
            ${{ secrets.ENV_PROD }}
            IMAGE=$IMAGE
            ENVV

            # sanity-check
            [ -f docker-compose.prod.yml ] || (echo "docker-compose.prod.yml MISSING"; exit 1)
            [ -f nginx.conf ] || (echo "nginx.conf MISSING"; exit 1)
            grep -qE '^IMAGE=.+$' .env || (echo "IMAGE missing in .env"; exit 1)

            # нормализация (на всякий случай)
            sed -i '1s/^\xEF\xBB\xBF//' docker-compose.prod.yml || true
            sed -i 's/\r$//' docker-compose.prod.yml || true
            sed -i 's/\t/  /g' docker-compose.prod.yml || true

            # логины
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
              echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin || true
            fi

            # подтянуть образы и поднять БД
            docker compose --env-file .env -f docker-compose.prod.yml pull
            docker compose --env-file .env -f docker-compose.prod.yml up -d db

            # дождаться готовности БД
            for i in $(seq 1 30); do
              docker compose -f docker-compose.prod.yml exec -T db bash -lc 'pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"' && break || sleep 2
            done

            # миграции и статика одноразово (без гонок старта web)
            docker compose --env-file .env -f docker-compose.prod.yml run --rm --no-deps web python manage.py migrate --noinput
            docker compose --env-file .env -f docker-compose.prod.yml run --rm --no-deps web python manage.py collectstatic --noinput

            # запуск web и nginx
            docker compose --env-file .env -f docker-compose.prod.yml up -d web nginx

            # быстрая проверка upstream
            docker compose exec -T nginx sh -lc 'apk add -q busybox-extras curl || true; nc -zv web 8000; curl -sI http://web:8000/ | head -n1'

            # лёгкая уборка
            docker system prune -f
